// <auto-generated />
using System;
using ElectionApi.Net.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectionApi.Net.Migrations
{
    [DbContext(typeof(ElectionDbContext))]
    [Migration("20250802233900_AddIsMasterToAdmin")]
    partial class AddIsMasterToAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ElectionApi.Net.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsMaster")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_master");

                    b.Property<bool>("IsSuper")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_super");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Permissions")
                        .HasColumnType("json")
                        .HasColumnName("permissions");

                    b.Property<bool>("RequireTwoFactorAuth")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("require_two_factor_auth");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("TwoFactorToken")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("two_factor_token");

                    b.Property<DateTime?>("TwoFactorTokenExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("two_factor_token_expiry");

                    b.Property<DateTime?>("TwoFactorVerifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("two_factor_verified_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("entity_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("logged_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_agent");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("LoggedAt");

                    b.HasIndex("UserId", "EntityType", "Action");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("longtext")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<int>("OrderPosition")
                        .HasColumnType("int")
                        .HasColumnName("order_position");

                    b.Property<string>("Party")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("party");

                    b.Property<byte[]>("PhotoData")
                        .HasColumnType("longblob")
                        .HasColumnName("photo_data");

                    b.Property<string>("PhotoFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo_file_name");

                    b.Property<string>("PhotoMimeType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("photo_mime_type");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo_url");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("candidates", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowBlankVotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_blank_votes");

                    b.Property<bool>("AllowNullVotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_null_votes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("ElectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("election_type");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_sealed");

                    b.Property<int>("MaxVotesPerVoter")
                        .HasColumnType("int")
                        .HasColumnName("max_votes_per_voter");

                    b.Property<bool>("RequireJustification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("require_justification");

                    b.Property<string>("ResultsVisibility")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("results_visibility");

                    b.Property<string>("SealHash")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("seal_hash");

                    b.Property<DateTime?>("SealedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sealed_at");

                    b.Property<int?>("SealedBy")
                        .HasColumnType("int")
                        .HasColumnName("sealed_by");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("timezone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<string>("VotingMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("voting_method");

                    b.HasKey("Id");

                    b.ToTable("elections", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowBlankVotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_blank_votes");

                    b.Property<bool>("AllowNullVotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_null_votes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxCandidates")
                        .HasColumnType("int")
                        .HasColumnName("max_candidates");

                    b.Property<int>("MaxVotesPerVoter")
                        .HasColumnType("int")
                        .HasColumnName("max_votes_per_voter");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("OrderPosition")
                        .HasColumnType("int")
                        .HasColumnName("order_position");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.SecureVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreationHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("creation_hash");

                    b.Property<string>("DeviceFingerprint")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("device_fingerprint");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<string>("ElectionSealHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("election_seal_hash");

                    b.Property<string>("EncryptedJustification")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("encrypted_justification");

                    b.Property<string>("EncryptedVoteData")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("encrypted_vote_data");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsBlankVote")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_blank_vote");

                    b.Property<bool>("IsNullVote")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_null_vote");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_valid");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("VoteHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("vote_hash");

                    b.Property<string>("VoteId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("vote_id");

                    b.Property<string>("VoteSignature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("vote_signature");

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vote_type");

                    b.Property<decimal>("VoteWeight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("vote_weight");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("voted_at");

                    b.Property<int>("VoterId")
                        .HasColumnType("int")
                        .HasColumnName("voter_id");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VoteId")
                        .IsUnique();

                    b.HasIndex("VotedAt");

                    b.HasIndex("VoterId", "ElectionId")
                        .IsUnique();

                    b.ToTable("secure_votes", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.SystemSeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_valid");

                    b.Property<string>("SealHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("seal_hash");

                    b.Property<string>("SealType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("seal_type");

                    b.Property<DateTime>("SealedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sealed_at");

                    b.Property<int>("SealedBy")
                        .HasColumnType("int")
                        .HasColumnName("sealed_by");

                    b.Property<string>("SystemData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("system_data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("SealedBy");

                    b.HasIndex("ElectionId", "SealType");

                    b.ToTable("system_seals", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsBlankVote")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_blank_vote");

                    b.Property<bool>("IsNullVote")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_null_vote");

                    b.Property<string>("Justification")
                        .HasColumnType("longtext")
                        .HasColumnName("justification");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("VoteHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vote_hash");

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vote_type");

                    b.Property<decimal>("VoteWeight")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("vote_weight");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("voted_at");

                    b.Property<int>("VoterId")
                        .HasColumnType("int")
                        .HasColumnName("voter_id");

                    b.Property<string>("VoterIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voter_ip");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VoterId", "ElectionId", "PositionId")
                        .IsUnique();

                    b.ToTable("votes", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.VoteReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_valid");

                    b.Property<string>("ReceiptToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("receipt_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("VoteData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("vote_data");

                    b.Property<string>("VoteHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("vote_hash");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("voted_at");

                    b.Property<int>("VoterId")
                        .HasColumnType("int")
                        .HasColumnName("voter_id");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ReceiptToken")
                        .IsUnique();

                    b.HasIndex("VoterId", "ElectionId")
                        .IsUnique();

                    b.ToTable("vote_receipts", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Voter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("email_verified_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_verified");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("verification_token");

                    b.Property<decimal>("VoteWeight")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("vote_weight");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("voters", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.ZeroReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int")
                        .HasColumnName("election_id");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("generated_at");

                    b.Property<int>("GeneratedBy")
                        .HasColumnType("int")
                        .HasColumnName("generated_by");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("ReportData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("report_data");

                    b.Property<string>("ReportHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("report_hash");

                    b.Property<int>("TotalCandidates")
                        .HasColumnType("int")
                        .HasColumnName("total_candidates");

                    b.Property<int>("TotalPositions")
                        .HasColumnType("int")
                        .HasColumnName("total_positions");

                    b.Property<int>("TotalRegisteredVoters")
                        .HasColumnType("int")
                        .HasColumnName("total_registered_voters");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int")
                        .HasColumnName("total_votes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId")
                        .IsUnique();

                    b.HasIndex("GeneratedBy");

                    b.ToTable("zero_reports", (string)null);
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Candidate", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Position", "Position")
                        .WithMany("Candidates")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Position", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany("Positions")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.SecureVote", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Voter", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Position");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.SystemSeal", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("SealedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Election");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Vote", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Candidate", "Candidate")
                        .WithMany("Votes")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany("Votes")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Voter", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Election");

                    b.Navigation("Position");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.VoteReceipt", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Voter", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.ZeroReport", b =>
                {
                    b.HasOne("ElectionApi.Net.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectionApi.Net.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("GeneratedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Election");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Candidate", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Election", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Position", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("ElectionApi.Net.Models.Voter", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
